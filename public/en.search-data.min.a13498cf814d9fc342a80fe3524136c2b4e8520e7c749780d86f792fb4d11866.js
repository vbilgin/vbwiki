'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/linux/nginx/',title:"nginx",section:"Linux",content:"nginx #  Hide .html in path #  Works but bad for SEO: try_files $uri.html $uri $uri/ =404;\nBetter: try_files $uri.html $uri/ =404;\n"}),a.add({id:1,href:'/docs/books/facebook/',title:"Facebook",section:"Books",content:"Facebook - Steven Levy #  Review #  I enjoyed this book and would recommend it if you\u0026rsquo;re looking for any of the below:\n An in-depth look at Facebook from the beginning until ~2019 An in-depth look at Mark Zuckerberg An understanding of how Facebook operates as an organization and a business  In terms of the writing, I felt like Levy jumped around chronologically to the point of confusion in certain chapters. Adding to this is the fact that a lot of people are named in this book. So the time jumps can be jarring. I also felt that Levy didn\u0026rsquo;t go far enough with his analysis of events. You can tell that he had more to say. Maybe that\u0026rsquo;s the price you pay for such unfettered access to Zuckerberg and Sandberg.\nIn prepping for this review, I asked myself how I feel about Facebook after reading Levy\u0026rsquo;s book. I also asked myself how I felt about it at the outset. I can be clear about my feelings at the outset: like many people, I felt this distaste towards Facebook the company and Facebook the product. Both have been so marred in controversy that most people seem to distrust Facebook even while continuing, paradoxically, to use the core product as well as Instagram, WhatsApp, and Oculus. That feeling hasn\u0026rsquo;t changed much after reading this book. But it has been augmented and fleshed out. I now understand why I felt the way I did. Part of the reason was that Facebook was made the punching bag for the media, politicians, and general public. Who doesn\u0026rsquo;t love something to hate? Of course, Facebook deserved most of the beatings it got. But that\u0026rsquo;s not the point. As a public (especially in the United States), we were taught to associate Facebook with \u0026ldquo;large evil company that doesn\u0026rsquo;t care about privacy.\u0026rdquo; Had the public been following Facebook\u0026rsquo;s actions since its inception, I think most people would\u0026rsquo;ve seen that Facebook was going to screw things up eventually. As much as Zuckerberg wants to claim that privacy was at the core of Facebook from the get-go, I don\u0026rsquo;t see it as such. His claim originates from the fact that only people with @harvard.edu email addresses were able to register and profiles weren\u0026rsquo;t publicly accessible. I see this kind of privacy protection as a side-effect, not an intended goal.\nNo sooner did Facebook gain mass popularity did Zuckerberg begin introducing \u0026ldquo;features\u0026rdquo; that stripped privacy away from users for the sake of growth, revenue, and his own personal desire to succeed. Businesses need growth and revenue, of course. And the CEOs of said businesses need to have a personal desire to succeed. But at what cost? Did the ends justify the means? No, not in my opinion.\nMind you, I do believe that Facebook\u0026rsquo;s net impact on the world has been positive (though there is an obvious downward trend). I agree with Zuckerberg that connecting the world is an important goal that can and should move forward in the face of difficulty and adverse effects. I simply don\u0026rsquo;t agree with Zuckerberg that this is why Facebook did what it did.\nA few asides:\n I completely agree with the stance many took at Facebook that technology is not inherently moral. Technology is a tool. A hammer can used to build a home one day and as a murder weapon the next. So too can technology be used to free a people one day and oppress them the next. The answer here is certainly not to cripple the tool for fear of the bad it could do. We tend to forget that those people we see on TV are just that, people. They have their feelings, their own moral compasses and deep-seated fears. I think Zuckerberg, Sandberg, and others should be held accountable for what Facebook has done and continues to do but I don\u0026rsquo;t think we should attack them personally.  "}),a.add({id:2,href:'/docs/books/permanent-record/',title:"Permanent Record",section:"Books",content:"Permanent Record - Edward Snowden #  Review #  An insightful look into the mind of a whistleblower. Regardless of your political opinion, I think it’s hard to underestimate Snowden. He’s cunning, down-to-earth, and caring. This is also a truly mind-bending look at the guts of the American (and in some ways global) intelligence community. It’s like looking at a slaughterhouse right before eating a steak. And by that I mean it made me gag when I saw the innards of intelligence. I won’t jump into political opinions here but suffice it to say this book is an interesting read regardless of whether you use it as ammo against Snowden or against the government.\n"}),a.add({id:3,href:'/docs/linux/linux-journey/advanced-text-fu/',title:"Advanced Text Fu",section:"Linux Journey",content:"Advanced Text-Fu #  regex (regular expressions) #   powerful tool for pattern recognition  Test string: sally sells seashells by the seashore  beginning of a line:^by will match by the seashore end of a line: seashore$ will match by the seashore match a single character: b. will match by bracket notation: match characters in the brackets  d[iou]g will match dig, dog, dug ^ in bracket means anything besides this: d[^i]g will match dog and dug but not dig specify a range of characters with a -: d[a-c]g brackets are case sensitive    "}),a.add({id:4,href:'/docs/linux/linux-journey/command-line/',title:"Command Line",section:"Linux Journey",content:"Command Line #  The Shell #   shell is just a program that takes your commands from the keyboard and sends them to the OS many types of shells: bash (bourne again shell), ksh, zsh, tsch echo will print the argument(s) to the screen date will print the current date whoami will print the currently logged in user\u0026rsquo;s username  pwd (Print Working Directory) #   everything in Linux is a file use pwd to see where you are currently located in the directory structure - the path  cd (change directory) #   you can specifiy paths in two ways: relative and absolute the absolute way means you type the path from the root directory / onward relative means you can use these shortcuts in the path since they are relative to where you currently are:  .: current dir ..: parent directory ~: home directory of the current user -: previous directory   cd is used to change your current working directory running it by itself will take you to the current user\u0026rsquo;s home dir  ls (list directories) #   running ls will list the contents of the current directory you can specifiy a dir to see the contents of that dir by default, this won\u0026rsquo;t show hidden files or dirs (those that start with a .)  -a to see all files and dirs   -l will show you more info in the long format  includes from left to right:  file permissions number of links owner name owner group file size timestamp of last modification file/dir name     multiple flags can be used as well so -la or -al would be a long listing of all files and dirs including hidden ones ls will list contents in alphabetical order, use -r to reverse the order -t to sort by mod time so that the newly modified files are first -R recursively lists dir contents  touch #   creates an empty file in the specified dir if you touch an existing file, that files mod timestamp will update  file #   in linux, filenames don\u0026rsquo;t require extensions, the OS can usually tell file \u0026lt;filename\u0026gt; to see what kind of file a file is  cat #   short for concatenate cat \u0026lt;filename\u0026gt; \u0026lt;?filename\u0026gt; will output the contents of a file (or multiple files together if multiple files are passed in)  less #   use less \u0026lt;filename\u0026gt; to get a paged view of the contents similar to cat but more useful for longer files Use these keyboard shortcuts to navigate:  q: quit less and go back to shell Page up, Page down, Up, Down: navigate using the arrow or page keys g: move to beginning of the text file Shift + G: move to end of text file /\u0026lt;word\u0026gt;: search for a word h: see help screen    history #   use to see history of all remembered commands run by logged in user !! to run the last command you entered Ctrl+R to do a reverse search of previously used commands  keep hitting Ctrl+R to cycle through the results   clear will clear the terminal display  cp (copy) #   cp \u0026lt;source\u0026gt; \u0026lt;destination\u0026gt; used to copy files and dirs to another location use wildcards to copy multiple files/dirs  *: all single characters or strings (cp *.jpeg /home/victor) ?: represent one variable character (cp ca?.jpg /home/victor will copy both cat.jpg and car.jpg, if they exist) []: represent any char within the brackets (cp ca[rt].jpg /home/victor will copy both cat.jpg and car.jpg if they exist)   -r to recursively copy all files and dirs within the source dir if you copy a file or dir to a place that already has a file or dir with that name, the destination data will be overwritten with the source -i will prompt before overwriting a file so you can choose whether or not to do so  mv (move) #   used for moving files/dirs and renaming them; similar to cp mv \u0026lt;current_file\u0026gt; \u0026lt;new_file\u0026gt; to rename mv \u0026lt;source\u0026gt; \u0026lt;destination\u0026gt; to move multiple sources can be provided this can overwrite so use -i when needed make a backup of the destination file before overwriting with -b  mkdir (make directory) #   used to create a new dir if it doesn\u0026rsquo;t already exist can create multiple dirs at once mkdir \u0026lt;new_dir_1\u0026gt; \u0026lt;new_dir_2\u0026gt; -p to create subdirs: mv -p books/hemingway/favs  rm (remove) #   rm \u0026lt;file\u0026gt; to delete a file or dir some protections are in place; if a file is write-protected rm will prompt before deletion -f to force deletion of files, regardless of write-protection (assuming correct permissions) -i to confirm interactively for each file -r to recursively delete files and dirs in a dir; can\u0026rsquo;t delete dir without this use rmdir \u0026lt;dir\u0026gt; to delete a dir as well  find #   find \u0026lt;dir_to_search\u0026gt; -name \u0026lt;filename\u0026gt; -type d to search for dirs: find /home -type d -name myFolder this is recursive by default  help #   help \u0026lt;command\u0026gt; will usually work echo --help usually works too for executables  man #   man \u0026lt;command\u0026gt; will provide the manual page if it exists  whatis #   whatis \u0026lt;command\u0026gt; to get some info on the command i.e. what it does  alias #   used to create an alias to a long or difficult command alias foobar='ls -la' so you can type foobar and ls -la will execute won\u0026rsquo;t save after restart so need to add it to ~/.bashrc or similar so it will stick remove with unalias \u0026lt;alias\u0026gt;  exit and logout #   used to exit the shell and/or log off the current user  "}),a.add({id:5,href:'/docs/linux/linux-journey/permissions/',title:"Permissions",section:"Linux Journey",content:"Permissions #  file permissions #   long listing for a file example: drwxr-xr-x 2 pete penguins 4096 Dec 1 11:45 file.txt four main parts to file\u0026rsquo;s permissions: drwxr-xr-x  first is the type of file (d for dir and - for regular file) next three are groups of three bits that denote actual permissions: rwx, r-x, and r-x  these represent the user permissions, group permissions, and other permissions r: readable w: writable x: executable (an executable program) -: empty      modifying permissions #   use chmod with + or - to add or remove permissions for example: chmod u+x myfile means to add the execute bit to the user permissions for myfile change multiple permission bits: chmod ug+w myfile will add writable bit to both user and group permissions using numerical syntax:  4: read 2: write 1: exec   chmod 755 myfile will provide all permissions to user but only read and exec to group and other permissions  ownership permissions #   you can change the user and group ownership of a file as well user: sudo chown \u0026lt;username\u0026gt; \u0026lt;file/dir\u0026gt; group: sudo chgrp \u0026lt;group\u0026gt; \u0026lt;file/dir\u0026gt; both: sudo shown \u0026lt;user\u0026gt;:\u0026lt;group\u0026gt; \u0026lt;file/dir\u0026gt;  umask #   every file gets created with certain default permissions use umask to change those default permissions umask takes the numerical permission syntax but not added: umask 021  we say what we want to take away so for the above example we would take no bits away from users take write bit away from group and take way exec from other   this won\u0026rsquo;t persist past a restart; need to modify .profile for that  setuid #  "}),a.add({id:6,href:'/docs/linux/linux-journey/text-fu/',title:"Text Fu",section:"Linux Journey",content:"Text-Fu #  stdout (standard out) #   echo hello world \u0026gt; peanuts.txt processes in linux use i/o streams to receive input and return output normally, echo takes the input (stdin) from the keyboard and returns the output (stdout) to the screen i/o redirection allows us to redirect the output to a file or another command: \u0026gt; if a file doesn\u0026rsquo;t already exist, it will create it. if it does exist, it will overwrite it \u0026gt;\u0026gt; to append instead of overwrite  stdin (standard in) #   the usual source for stdin is the keyboard but we can also use files, output from other processes, and the terminal \u0026lt; for stdin redirection cat \u0026lt; peanuts.txt \u0026gt; banana.txt we direct the contents of peanuts.txt into cat and then direct the output of that into banana.txt  stderr (standard error) #   stderr (errors from commands or programs) go to the screen by default we can redirect errors with 2\u0026gt;:  ls /fake/dir 2\u0026gt; peanuts.txt   what if we wanted to output both stdout and stderr?  ls /fake/dir \u0026gt; peanuts.txt 2\u0026gt;\u0026amp;1 sends the results of ls to the file and then tells stderr to go redirect to wherever stdout is pointing (peanuts.txt)   shorter way: ls /fake/dir \u0026amp;\u0026gt; peanuts.txt want to get rid of errors completely?  ls /fake/dir 2\u0026gt; /dev/null    pipe and tee #   use a pipe (|) to redirect output from one command to another basically takes the stdout of one command and makes it the stdin of the next what if you want to see the output and pipe it? use tee:  ls | tee peanuts.txt you\u0026rsquo;ll see the result and it\u0026rsquo;ll be in the file    env (environment) #   env variables such as $HOME and $USER exist and will change based on the situation see env variables with env access env variables by adding $ to the front very important env var is $PATH - this a string of dirs separated by colons that the OS uses to find commands  download an executable and want to use it anywhere? either add the dir to the PATH or move the executable to one of the current PATH dirs    cut #   extracts a portion of text from a file cut -c 5 sample.txt will output the fifth character (starting at 1, not 0) of every line of text in the file cut -f 2 sameple.txt will cut the text based on fields  default delimiter of a field is TAB, everything separated by a TAB is considered a different field add -d \u0026quot;\u0026lt;delimiter\u0026gt;\u0026quot; to specifiy a custom delimiter   can specifiy a range of chars or fields: -c 2-5 (2nd thru 5th) or -c 5- (5th thru last) or -c -5 (1st thru 5th)  paste #   similar to cat, merges lines together in a file paste -s sample.txt will output the contents of the file merged together with the default delimiter of TAB  -s to make it one line use -d \u0026quot;\u0026lt;delimiter\u0026gt;\u0026quot; to specify a custom delimiter    head #   head \u0026lt;file\u0026gt; will output the first 10 lines of a file -n \u0026lt;num\u0026gt; to specify the number of lines  tail #   same as head but for last 10 lines use -n \u0026lt;num\u0026gt; to specify number of lines use -f to follow the file (see changes as they occur)  expand and unexpand #   expand \u0026lt;file\u0026gt; to change all TABs to spaces unexpand -a \u0026lt;file\u0026gt; to do the opposite  join and split #   use join \u0026lt;file_1\u0026gt; \u0026lt;file_2\u0026gt; to join the files together by a common field:  file1.txt 1 John 2 Jane 3 Mary file2.txt 1 Doe 2 Doe 3 Sue $ join file1.txt file2.txt 1 John Doe 2 Jane Doe 3 Mary Sue  joined by first field by default; fields have to be identical  file1.txt John 1 Jane 2 Mary 3 file2.txt 1 Doe 2 Doe 3 Sue  use join -1 2 -2 1 file1.txt file2.txt for the above use split \u0026lt;file\u0026gt; to split a file into different files (split once 1000 lines reached)  files named x** by default    sort #   sort \u0026lt;file\u0026gt; to sort the lines of the file alphabetically -r to do a reverse sort -n to sort based on numerical value  tr (translate) #   tr a-z A-Z will transform all lowercase letters to uppercase interactively -d \u0026lt;characters\u0026gt; to delete certain chars from the input  uniq (unique) #   pass in a file and get only unique values as output: uniq \u0026lt;file\u0026gt; -c to get a count of how many times each value appeared -u to get only values that appeared once (truly unique) -d to get only values that occur more than once (duplicates) NOTE: uniq will not detect duplicates unless they are adjacent  to overcome this we can sort first and the pipe into uniq    wc and nl #   wc \u0026lt;file\u0026gt; shows the total count of words in a file it displays  the number of lines (-l) number of words (-w) number of bytes (-c)   pass the above flags to only get that value similar is nl \u0026lt;file\u0026gt; which outputs a numbered version of the lines in the file:  1. sdfasdf 2. dsdfsdf grep #   used to search for matching pattern grep \u0026lt;pattern\u0026gt; \u0026lt;location_to_search\u0026gt; -i to make it case insensitive you can use regex if needed -E to interpret patterns as extended regex -F to interpret patterns as fixed strings, not regex  "}),a.add({id:7,href:'/docs/linux/linux-journey/user-management/',title:"User Management",section:"Linux Journey",content:"User Management #  users and groups #   in traditional OSs, users and groups are used for access and permissions when a process is started by a user, the owner of the process will be that user file access and ownership is governed by users and groups each user has their own home directory (usually) and it can be find in /home/username in most distros system uses UIDs (user IDs) to manage users but humans use usernames groups are just collections of users; system assigns them GIDs (group IDs) in linux, there are non-human users too; these users run system processes (daemons) one of the most important users is root or superuser  root is the most powerful user on the system root can access any file/dir and kill any process don\u0026rsquo;t want to be root all the time as that is dangerous if possible, run a command as root via sudo (superuser do)    root #   use su or su - to get a root shell (su is for substitute user)  this can used with a username to act as that user, not just root   who can use sudo? the file /etc/sudoers says who. use visudo to edit it  /etc/passwd #   to see what username is mapped to what UID, look at /etc/passwd lines look like a:x:1000:1000:,,,:/home/a:/bin/bash format is this: [username]:[user's password]:[UID]:[GID]:[GECOS]:[user's home dir]: [user's shell]  password isn\u0026rsquo;t actually stored here but in /etc/shadow  this field will have x if the password is encrypted and stored in /etc/shadow * if user doesn\u0026rsquo;t have login access if blank, there is no password   GECOS is a comma-delimited field where info like user\u0026rsquo;s real name can be put   human and system users are listed in this file you can edit this file by hand with vipw but better to use other tools  /etc/shadow #   this has info about user auth so it requires sudo to read lines look like: a:$6$ImMe6v6yyz1XoGHN$y8XPBMCTp11AV0INRNJc7eO8eXppXqVlqstB3ftR3iajOgxAdXmlQ9P8RYAT6XpxfraCHQJAS3CnG6qwjg9Q71:18692:0:99999:7::: format: [username]:[encrypted password]:[date of last pass change]:[min password age]:[max password age]:[password warning period]:[password inactivity period]:[accoutn expiration date]:[reserved field for future use]  /etc/group #   shows different groups and their permissions lines look like root:x:0: format: [group name]:[group password]:[GID]:[list of users in group] groups will show you what groups you\u0026rsquo;re in  user mgmt tools #   adduser and useradd both create new users  adduser has more features like making a home dir need to run with sudo   sudo userdel \u0026lt;user\u0026gt; to delete user passwd \u0026lt;user\u0026gt; to change password  "}),a.add({id:8,href:'/docs/linux/ssh/',title:"SSH",section:"Linux",content:"SSH #  "}),a.add({id:9,href:'/docs/networking/home-network/',title:"Home Network",section:"Networking",content:"Home Network #  IP Address Scheme #  VLAN 1 (Production) - 10.0.1.0/24 #  Static IPs #   Router1 - 10.0.1.1 Switch1 - 10.0.1.2 AP1 - 10.0.1.3 Printer1 - 10.0.1.4 PI-4 - 10.0.1.5 NAS1 - 10.0.1.50 ubuntu-dev - 10.0.1.51  DHCP Range #  10.0.1.200 - 10.0.1.254\nVLAN 2 (Lab) - 10.0.2.0/24 #  "}),a.add({id:10,href:'/docs/recipes/alcoholic/black-russian/',title:"Black Russian",section:"Alcoholic",content:"Black Russian #  Ingredients #   1½ ounces vodka ¾ ounce Kahlúa (or Tia Maria) Lemon twist  Steps #   Shake the liquid ingredients vigorously with ice. Strain into an ice-filled old-fashioned glass. Twist the lemon peel over the drink, and drop it in.  Variations #  For a Black Magic, add a dash of fresh lemon juice.\nFor a White Russian, float ½ ounce heavy cream on top.\nSource #  The Ultimate Bar Book\n"}),a.add({id:11,href:'/docs/recipes/alcoholic/lemon-drop/',title:"Lemon Drop",section:"Alcoholic",content:"Lemon Drop #  Ingredients #   2 oz (60ml) vodka .75 oz (45ml) fresh lemon juice .75 oz (45ml) simple syrup  Steps #   Combine all ingredients into a shaker tin with ice Shake and then double strain into a chilled coupe glass Garnish with a lemon twist  Source #  https://www.cocktailchemistrylab.com/home/vodka-cocktails?rq=vodka\n"}),a.add({id:12,href:'/docs/recipes/alcoholic/moscow-mule/',title:"Moscow Mule",section:"Alcoholic",content:"Moscow Mule #  Ingredients #   2oz (60ml) vodka Juice from half a lime 4oz (120ml) ginger beer  Steps #   Add vodka to a collins glass with ice Squeeze in fresh lime juice Top with ginger beer Garnish with a lime wedge  Source #  https://www.cocktailchemistrylab.com/home/vodka-cocktails?rq=vodka\n"}),a.add({id:13,href:'/docs/recipes/alcoholic/screwdriver/',title:"Screwdriver",section:"Alcoholic",content:"Screwdriver #  Ingredients #   2 ounces vodka 4 to 6 ounces fresh orange juice Orange slice  Steps #   Pour the vodka and orange juice into an ice-filled highball glass, and stir. Garnish with the orange slice.  Source #  The Ultimate Bar Book\n"}),a.add({id:14,href:'/docs/recipes/alcoholic/the-naughty-dog/',title:"The Naughty Dog",section:"Alcoholic",content:"The Naughty Dog #  Ingredients #   1oz Kahlua 1.5oz Rum ~2.5oz Root Beer Float of heavy cream Nutmeg  Steps #   Pour Kahlua into tall glass Add rum Add ice to top Float heavy cream Stir briefly Garnish with nutmeg  Source #  Erick Castro\n"})})()